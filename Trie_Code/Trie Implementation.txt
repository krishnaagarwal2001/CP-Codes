 class Node {
public:
	char ch;
	bool isTerminal;
	unordered_map<char, Node*> children;
	Node(char ch) {
		this->ch = ch;
		this->isTerminal = false;
	}
};
 
class Trie {
public:
	Node *root;
 
	Trie() {
		this->root = new Node('\0');
	}
 
	void insert(string str) {
		Node *temp = root;
		for(int i = 0; i < str.size(); i++) {
			char ch = str[i];
			if(temp->children.count(ch)) {

				temp = temp->children[ch];
			} else {
				Node *n = new Node(ch);
				temp->children[ch] = n;
				temp = n;
			}
		}
		temp->isTerminal = true;
		return;
	}

	bool search(string str)
	{
		Node *temp = root;
		for(int i = 0; i < str.size(); i++) {
			char ch = str[i];
			if(temp->children.count(ch)) {
				
				temp = temp->children[ch];
			} else {
				return false;
			}
		}
		return temp->isTerminal;
	}

	void dfs(Node *root,string pre,string op)
	{
		if(root==NULL) return;
		if(root->isTerminal)cout<<pre+op<<endl;

		for(auto c:root->children)
			dfs(c.second,pre,op+c.first);

	}

	void print_strings_with_prefix(string pre)
	{
		Node *temp=this->root;
		for(int i = 0; i < str.size(); i++) {
			char ch = str[i];
			if(temp->children.count(ch)) {
				
				temp = temp->children[ch];
			} else {
				return;
			}
		}
		dfs(temp,pre,"");
	}
};
 
